// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/crhntr/dom/domtest/example/blog"
)

type App struct {
	ArticleStub        func(int) blog.Article
	articleMutex       sync.RWMutex
	articleArgsForCall []struct {
		arg1 int
	}
	articleReturns struct {
		result1 blog.Article
	}
	articleReturnsOnCall map[int]struct {
		result1 blog.Article
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *App) Article(arg1 int) blog.Article {
	fake.articleMutex.Lock()
	ret, specificReturn := fake.articleReturnsOnCall[len(fake.articleArgsForCall)]
	fake.articleArgsForCall = append(fake.articleArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.ArticleStub
	fakeReturns := fake.articleReturns
	fake.recordInvocation("Article", []interface{}{arg1})
	fake.articleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *App) ArticleCallCount() int {
	fake.articleMutex.RLock()
	defer fake.articleMutex.RUnlock()
	return len(fake.articleArgsForCall)
}

func (fake *App) ArticleCalls(stub func(int) blog.Article) {
	fake.articleMutex.Lock()
	defer fake.articleMutex.Unlock()
	fake.ArticleStub = stub
}

func (fake *App) ArticleArgsForCall(i int) int {
	fake.articleMutex.RLock()
	defer fake.articleMutex.RUnlock()
	argsForCall := fake.articleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *App) ArticleReturns(result1 blog.Article) {
	fake.articleMutex.Lock()
	defer fake.articleMutex.Unlock()
	fake.ArticleStub = nil
	fake.articleReturns = struct {
		result1 blog.Article
	}{result1}
}

func (fake *App) ArticleReturnsOnCall(i int, result1 blog.Article) {
	fake.articleMutex.Lock()
	defer fake.articleMutex.Unlock()
	fake.ArticleStub = nil
	if fake.articleReturnsOnCall == nil {
		fake.articleReturnsOnCall = make(map[int]struct {
			result1 blog.Article
		})
	}
	fake.articleReturnsOnCall[i] = struct {
		result1 blog.Article
	}{result1}
}

func (fake *App) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.articleMutex.RLock()
	defer fake.articleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *App) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ blog.RoutesReceiver = new(App)
