// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/crhntr/dom/domtest"
)

type T struct {
	ErrorStub        func(...any)
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		arg1 []any
	}
	HelperStub        func()
	helperMutex       sync.RWMutex
	helperArgsForCall []struct {
	}
	LogStub        func(...any)
	logMutex       sync.RWMutex
	logArgsForCall []struct {
		arg1 []any
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *T) Error(arg1 ...any) {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		arg1 []any
	}{arg1})
	stub := fake.ErrorStub
	fake.recordInvocation("Error", []interface{}{arg1})
	fake.errorMutex.Unlock()
	if stub != nil {
		fake.ErrorStub(arg1...)
	}
}

func (fake *T) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *T) ErrorCalls(stub func(...any)) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = stub
}

func (fake *T) ErrorArgsForCall(i int) []any {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	argsForCall := fake.errorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *T) Helper() {
	fake.helperMutex.Lock()
	fake.helperArgsForCall = append(fake.helperArgsForCall, struct {
	}{})
	stub := fake.HelperStub
	fake.recordInvocation("Helper", []interface{}{})
	fake.helperMutex.Unlock()
	if stub != nil {
		fake.HelperStub()
	}
}

func (fake *T) HelperCallCount() int {
	fake.helperMutex.RLock()
	defer fake.helperMutex.RUnlock()
	return len(fake.helperArgsForCall)
}

func (fake *T) HelperCalls(stub func()) {
	fake.helperMutex.Lock()
	defer fake.helperMutex.Unlock()
	fake.HelperStub = stub
}

func (fake *T) Log(arg1 ...any) {
	fake.logMutex.Lock()
	fake.logArgsForCall = append(fake.logArgsForCall, struct {
		arg1 []any
	}{arg1})
	stub := fake.LogStub
	fake.recordInvocation("Log", []interface{}{arg1})
	fake.logMutex.Unlock()
	if stub != nil {
		fake.LogStub(arg1...)
	}
}

func (fake *T) LogCallCount() int {
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	return len(fake.logArgsForCall)
}

func (fake *T) LogCalls(stub func(...any)) {
	fake.logMutex.Lock()
	defer fake.logMutex.Unlock()
	fake.LogStub = stub
}

func (fake *T) LogArgsForCall(i int) []any {
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	argsForCall := fake.logArgsForCall[i]
	return argsForCall.arg1
}

func (fake *T) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.helperMutex.RLock()
	defer fake.helperMutex.RUnlock()
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *T) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domtest.T = new(T)
