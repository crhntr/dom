// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/crhntr/dom/domtest"
)

type TestingT struct {
	ErrorStub        func(...any)
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		arg1 []any
	}
	ErrorfStub        func(string, ...interface{})
	errorfMutex       sync.RWMutex
	errorfArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	FailNowStub        func()
	failNowMutex       sync.RWMutex
	failNowArgsForCall []struct {
	}
	FailedStub        func() bool
	failedMutex       sync.RWMutex
	failedArgsForCall []struct {
	}
	failedReturns struct {
		result1 bool
	}
	failedReturnsOnCall map[int]struct {
		result1 bool
	}
	HelperStub        func()
	helperMutex       sync.RWMutex
	helperArgsForCall []struct {
	}
	LogStub        func(...any)
	logMutex       sync.RWMutex
	logArgsForCall []struct {
		arg1 []any
	}
	SkipNowStub        func()
	skipNowMutex       sync.RWMutex
	skipNowArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TestingT) Error(arg1 ...any) {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		arg1 []any
	}{arg1})
	stub := fake.ErrorStub
	fake.recordInvocation("Error", []interface{}{arg1})
	fake.errorMutex.Unlock()
	if stub != nil {
		fake.ErrorStub(arg1...)
	}
}

func (fake *TestingT) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *TestingT) ErrorCalls(stub func(...any)) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = stub
}

func (fake *TestingT) ErrorArgsForCall(i int) []any {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	argsForCall := fake.errorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TestingT) Errorf(arg1 string, arg2 ...interface{}) {
	fake.errorfMutex.Lock()
	fake.errorfArgsForCall = append(fake.errorfArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	stub := fake.ErrorfStub
	fake.recordInvocation("Errorf", []interface{}{arg1, arg2})
	fake.errorfMutex.Unlock()
	if stub != nil {
		fake.ErrorfStub(arg1, arg2...)
	}
}

func (fake *TestingT) ErrorfCallCount() int {
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	return len(fake.errorfArgsForCall)
}

func (fake *TestingT) ErrorfCalls(stub func(string, ...interface{})) {
	fake.errorfMutex.Lock()
	defer fake.errorfMutex.Unlock()
	fake.ErrorfStub = stub
}

func (fake *TestingT) ErrorfArgsForCall(i int) (string, []interface{}) {
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	argsForCall := fake.errorfArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TestingT) FailNow() {
	fake.failNowMutex.Lock()
	fake.failNowArgsForCall = append(fake.failNowArgsForCall, struct {
	}{})
	stub := fake.FailNowStub
	fake.recordInvocation("FailNow", []interface{}{})
	fake.failNowMutex.Unlock()
	if stub != nil {
		fake.FailNowStub()
	}
}

func (fake *TestingT) FailNowCallCount() int {
	fake.failNowMutex.RLock()
	defer fake.failNowMutex.RUnlock()
	return len(fake.failNowArgsForCall)
}

func (fake *TestingT) FailNowCalls(stub func()) {
	fake.failNowMutex.Lock()
	defer fake.failNowMutex.Unlock()
	fake.FailNowStub = stub
}

func (fake *TestingT) Failed() bool {
	fake.failedMutex.Lock()
	ret, specificReturn := fake.failedReturnsOnCall[len(fake.failedArgsForCall)]
	fake.failedArgsForCall = append(fake.failedArgsForCall, struct {
	}{})
	stub := fake.FailedStub
	fakeReturns := fake.failedReturns
	fake.recordInvocation("Failed", []interface{}{})
	fake.failedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TestingT) FailedCallCount() int {
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	return len(fake.failedArgsForCall)
}

func (fake *TestingT) FailedCalls(stub func() bool) {
	fake.failedMutex.Lock()
	defer fake.failedMutex.Unlock()
	fake.FailedStub = stub
}

func (fake *TestingT) FailedReturns(result1 bool) {
	fake.failedMutex.Lock()
	defer fake.failedMutex.Unlock()
	fake.FailedStub = nil
	fake.failedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *TestingT) FailedReturnsOnCall(i int, result1 bool) {
	fake.failedMutex.Lock()
	defer fake.failedMutex.Unlock()
	fake.FailedStub = nil
	if fake.failedReturnsOnCall == nil {
		fake.failedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.failedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *TestingT) Helper() {
	fake.helperMutex.Lock()
	fake.helperArgsForCall = append(fake.helperArgsForCall, struct {
	}{})
	stub := fake.HelperStub
	fake.recordInvocation("Helper", []interface{}{})
	fake.helperMutex.Unlock()
	if stub != nil {
		fake.HelperStub()
	}
}

func (fake *TestingT) HelperCallCount() int {
	fake.helperMutex.RLock()
	defer fake.helperMutex.RUnlock()
	return len(fake.helperArgsForCall)
}

func (fake *TestingT) HelperCalls(stub func()) {
	fake.helperMutex.Lock()
	defer fake.helperMutex.Unlock()
	fake.HelperStub = stub
}

func (fake *TestingT) Log(arg1 ...any) {
	fake.logMutex.Lock()
	fake.logArgsForCall = append(fake.logArgsForCall, struct {
		arg1 []any
	}{arg1})
	stub := fake.LogStub
	fake.recordInvocation("Log", []interface{}{arg1})
	fake.logMutex.Unlock()
	if stub != nil {
		fake.LogStub(arg1...)
	}
}

func (fake *TestingT) LogCallCount() int {
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	return len(fake.logArgsForCall)
}

func (fake *TestingT) LogCalls(stub func(...any)) {
	fake.logMutex.Lock()
	defer fake.logMutex.Unlock()
	fake.LogStub = stub
}

func (fake *TestingT) LogArgsForCall(i int) []any {
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	argsForCall := fake.logArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TestingT) SkipNow() {
	fake.skipNowMutex.Lock()
	fake.skipNowArgsForCall = append(fake.skipNowArgsForCall, struct {
	}{})
	stub := fake.SkipNowStub
	fake.recordInvocation("SkipNow", []interface{}{})
	fake.skipNowMutex.Unlock()
	if stub != nil {
		fake.SkipNowStub()
	}
}

func (fake *TestingT) SkipNowCallCount() int {
	fake.skipNowMutex.RLock()
	defer fake.skipNowMutex.RUnlock()
	return len(fake.skipNowArgsForCall)
}

func (fake *TestingT) SkipNowCalls(stub func()) {
	fake.skipNowMutex.Lock()
	defer fake.skipNowMutex.Unlock()
	fake.SkipNowStub = stub
}

func (fake *TestingT) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	fake.failNowMutex.RLock()
	defer fake.failNowMutex.RUnlock()
	fake.failedMutex.RLock()
	defer fake.failedMutex.RUnlock()
	fake.helperMutex.RLock()
	defer fake.helperMutex.RUnlock()
	fake.logMutex.RLock()
	defer fake.logMutex.RUnlock()
	fake.skipNowMutex.RLock()
	defer fake.skipNowMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TestingT) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domtest.TestingT = new(TestingT)
